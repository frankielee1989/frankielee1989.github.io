<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>两数之和</title>
    <link href="/2020/06/28/twosum/"/>
    <url>/2020/06/28/twosum/</url>
    
    <content type="html"><![CDATA[<p><strong>题目描述：</strong><br>    给定一个整数数组 nums 和一个目标值 target，请你在该数组中找出和为目标值的那 两个 整数，并返回他们的数组下标。<br>    你可以假设每种输入只会对应一个答案。但是，数组中同一个元素不能使用两遍。<br><strong>示例：</strong><br>    给定 nums = [2, 7, 11, 15], target = 9<br>    因为 nums[0] + nums[1] = 2 + 7 = 9<br>    所以返回 [0, 1]<br><strong>解题思路：</strong></p><ul><li>标签：哈希映射</li><li>这道题本身如果通过暴力遍历的话也是很容易解决的，时间复杂度在 O(n2)</li><li>由于哈希查找的时间复杂度为 O(1)，所以可以利用哈希容器 map 降低时间复杂度</li><li>遍历数组 nums，i 为当前下标，每个值都判断map中是否存在 target-nums[i] 的 key 值</li><li>如果存在则找到了两个值，如果不存在则将当前的 (nums[i],i) 存入 map 中，继续遍历直到找到为止</li><li>如果最终都没有结果则抛出异常</li><li>时间复杂度：O(n)<br><strong>图解：</strong><br><img src="https://tva1.sinaimg.cn/large/007S8ZIlly1gg87mvg7buj30yo0k2758.jpg" srcset="/img/loading.gif" alt=""></li><li><img src="https://tva1.sinaimg.cn/large/007S8ZIlly1gg87n0zbh3j30yo0k2q4a.jpg" srcset="/img/loading.gif" alt=""></li><li><img src="https://tva1.sinaimg.cn/large/007S8ZIlly1gg87n55x68j30yo0k2abf.jpg" srcset="/img/loading.gif" alt=""></li><li><img src="https://tva1.sinaimg.cn/large/007S8ZIlly1gg87nd6l3bj30yo0k2tab.jpg" srcset="/img/loading.gif" alt=""></li><li></li></ul><pre><code class="hljs Java"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> </span>&#123;    <span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span>[] twoSum(<span class="hljs-keyword">int</span>[] nums, <span class="hljs-keyword">int</span> target) &#123;        Map&lt;Integer, Integer&gt; map = <span class="hljs-keyword">new</span> HashMap&lt;&gt;();        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i&lt; nums.length; i++) &#123;            <span class="hljs-keyword">int</span> complement = target - nums[i];            <span class="hljs-keyword">if</span>(map.containsKey(complement)) &#123;                <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[] &#123;map.get(complement),i&#125;;            &#125;            map.put(nums[i], i);        &#125;        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> IllegalArgumentException(<span class="hljs-string">"No two sum solution"</span>);    &#125;&#125;</code></pre>]]></content>
    
    
    <categories>
      
      <category>LeetCode</category>
      
    </categories>
    
    
    <tags>
      
      <tag>数组</tag>
      
      <tag>哈希表</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
